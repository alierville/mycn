"use strict";async function createPool(e,n={}){n.logError||(n.logError=console.log),n.connectionTtl||(n.connectionTtl=60);let t=!1,a=await e(),o=[],l=null;return{get singleUse(){if(t)throw new Error("Cannot use the main connection, the pool is closed");return a},grab:async()=>{if(t)throw new Error('Invalid call to "grab", the pool is closed');let n=o.pop();return n?n.db:e()},release:e=>{o.push({db:e,releaseTime:Date.now()}),t?i(!0):function(){if(null!==l)return;l=setInterval(()=>{i(),0===o.length&&(clearInterval(l),l=null)},2e4)}()},close:async()=>{if(t)throw new Error('Invalid call to "close", the pool is already closed');t=!0,await a.close()}};function i(e=!1){let t,a=Date.now()-1e3*n.connectionTtl;for(t=0;t<o.length&&(e||!(o[t].releaseTime>a));++t)o[t].db.close().catch(n.logError);t>0&&(o=o.slice(t))}}async function toDatabaseConnection(e,n,t,a=!1){let o=!1,l=!1,i={exec:(e,t)=>n.exec(e,t),all:(e,t)=>n.all(e,t),prepare:async(t,a)=>await toPreparedStatement(e,await n.prepare(t,a)),execScript:e=>n.execScript(e),singleRow:async(e,t)=>toSingleRow(await n.all(e,t)),singleValue:async(e,t)=>toSingleValue(await n.all(e,t)),get inTransaction(){return a},commit:()=>r("commit"),rollback:()=>r("rollback"),beginTransaction:async(l=!1)=>{if(o)throw new Error("Invalid call to 'beginTransaction', the connection is closed");if(a)throw new Error("Cannot open a transaction in a transaction");let i=await t.grab();return await i.exec("begin"),await toDatabaseConnection(e,n,t,!0)},close:async()=>{if(o)throw new Error("Invalid call to 'close', the connection is already closed");let e;a&&(e=i.rollback()),o=!0,e&&await e,l||t.singleUse!==n||await t.close()}};return e.initDatabaseConnection&&await e.initDatabaseConnection(i),e.modifyDatabaseConnection&&(i=await e.modifyDatabaseConnection(i)),i;async function r(e){if(o)throw new Error(`Invalid call to '${e}', the connection is closed`);if(!a||n===t.singleUse)throw new Error(`Cannot '${e}', not in a transaction`);a=!1,l=!0,await n.exec(e),t.release(n),n=t.singleUse}}async function toPreparedStatement(e,n){let t={exec:e=>n.exec(e),all:e=>n.all(e),fetch:()=>n.fetch(),bind:(e,t)=>n.bind(e,t),unbindAll:()=>n.unbindAll(),finalize:()=>n.finalize(),singleRow:async e=>toSingleRow(await n.all(e)),singleValue:async e=>toSingleValue(await n.all(e))};return e.modifyPreparedStatement&&(t=await e.modifyPreparedStatement(t)),t}function toSingleRow(e){if(1!==e.length){if(0===e.length)return;throw new Error(`Cannot fetch one value, row count: ${e.length}`)}return e[0]}function toSingleValue(e){let n=toSingleRow(e);if(void 0===n)return;let t=Object.keys(n);if(1!==t.length)throw new Error(`Cannot fetch one value, column count: ${t.length}`);return n[t[0]]}async function createDatabaseConnection(e,n={}){let t=await createPool(e,n.poolOptions);return await toDatabaseConnection(n,t.singleUse,t)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.createDatabaseConnection=createDatabaseConnection;